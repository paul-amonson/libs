// Copyright 2018 Paul Amonson
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
//        You may obtain a copy of the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

def honorCoverageRules = false

def gitVersionString = { ->
    def stdout = new ByteArrayOutputStream()
    exec {
        commandLine 'git', 'describe', '--tags'
        standardOutput = stdout
    }
    return stdout.toString().trim()
}

allprojects {
    apply plugin: 'java'

    version = gitVersionString()
    sourceCompatibility = 1.8
}

subprojects {
    apply plugin: 'idea'
    apply plugin: 'jacoco'

    dependencies {
        testCompile 'junit:junit:4.12'
    }

    compileJava {
        options.compilerArgs << '-Werror'
        options.compilerArgs << '-Xlint:all,-processing,-path'
        options.compilerArgs << '-XDignore.symbol.file=true'
        options.fork = true
        options.forkOptions.executable = 'javac'
    }

    repositories {
        jcenter()
    }

    task copyJars(type: Copy) {
        from jar.outputs
        from configurations.compile
        into "${rootProject.buildDir}/libs"
    }
    jar.finalizedBy(copyJars)

    test {
        reports {
            html.destination = file("${rootProject.buildDir}/reports/test/${project.name}")
        }
        finalizedBy(jacocoTestReport)
    }

    jacocoTestReport {
        group = "Reporting"
        reports {
            xml.enabled = true
            csv.enabled = false
            html.destination = file("${rootProject.buildDir}/reports/coverage/${project.name}")
        }
        finalizedBy(jacocoTestCoverageVerification)
    }

    jacocoTestCoverageVerification {
        violationRules {
            rule {
                element = 'PACKAGE'
                enabled = honorCoverageRules
                limit {
                    counter = 'METHOD'
                    minimum = 0.90
                }
            }
            rule {
                element = 'PACKAGE'
                enabled = honorCoverageRules
                limit {
                    counter = 'BRANCH'
                    minimum = 0.70
                }
            }
        }
    }
}

project(':crypto') {
    group = 'com.amonson'
    dependencies {
        compile project(':prop_store')
    }
}

project(':prop_store') {
    group = 'com.amonson'
    dependencies {
        compile group: 'com.github.cliftonlabs', name: 'json-simple', version: '3.0.2+'
        compile group: 'org.yaml', name: 'snakeyaml', version: '1.21+'
    }
}

task cleanUp(type: Delete) {
    delete "${rootProject.buildDir}/libs/${rootProject.name}-${rootProject.version}.jar"
}
jar.finalizedBy(cleanUp)
jar.dependsOn(subprojects.jar)
