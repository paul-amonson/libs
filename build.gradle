// Copyright (C) 2018-2021 Paul Amonson
//
// SPDX-License-Identifier: Apache-2.0
//

plugins {
    id 'idea'
    id 'jacoco'
    id 'groovy'
    id 'maven-publish'
    id 'org.ajoberstar.git-publish' version '0.3.3'
}

def honorScanningRules = false


String gitVersionString() {
    def origin = "master"
    if(System.properties.containsKey("OfficialBuild"))
        origin = "origin/master"
    def stdout = new ByteArrayOutputStream()
    def stderr = new ByteArrayOutputStream()
    exec {
        ignoreExitValue = true
        standardOutput = stdout
        errorOutput = stderr
        commandLine "git", "--git-dir=${rootProject.projectDir}/.git", "describe", origin, "--tags"
    }
    String localVersion = stdout.toString().trim()
    return (localVersion == null || localVersion.isEmpty())?'0.0.0':localVersion
}

version = gitVersionString()

System.out.printf("*** Building version: %s\n\n", version)

def baseVersion = version.split("-")[0]
def release = false
if(version == baseVersion) {
    release = true
    System.out.println("*** This is a release version!\n")
}

build.group = "_favorites"
clean.group = "_favorites"
test.group = "_favorites"
jar.group = "_favorites"
gitPublishPush.group = "_favorites"

publishing {
    publications {
        maven(MavenPublication) {
            groupId = 'com.amonson'
            artifactId = 'libs'
            version = baseVersion

            from components.java
        }
    }
    repositories {
        maven {
            name = 'MyRepo'
            url = "http://synology:8090/" + (release ? "releases" : "snapshots")
            allowInsecureProtocol = true
        }
    }
}
publish.group = "_favorites"
gitPublish {
    repoUri = 'git@github.com:paul-amonson/libs.git'
    branch = 'gh-pages'
    contents {
        from "${buildDir}/docs"
        into '/'
    }
    commitMessage = 'Publishing to github pages'
}

gitPublishPush {
    onlyIf {
        return release
    }
}

apply plugin: 'java-library'
apply plugin: 'jacoco'
apply plugin: 'groovy'

targetCompatibility = 11
sourceCompatibility = 11

repositories {
    mavenCentral()
}

dependencies {
    implementation group: 'com.github.cliftonlabs', name: 'json-simple', version: '4.0.0'
    implementation group: 'org.yaml', name: 'snakeyaml', version: '1.21+'
    implementation group: 'org.zeromq', name: 'jeromq', version: '0.5.1'
    implementation group: 'commons-cli', name: 'commons-cli', version: '1.4'
    implementation group: 'org.voltdb', name: 'voltdbclient', version: '10.1.1'
    implementation group: 'redis.clients', name: 'jedis', version: '3.2.0'
    implementation group: 'commons-io', name: 'commons-io', version: '2.11.0'
    implementation group: 'org.apache.logging.log4j', name: 'log4j-core', version: '2.14.1'
    implementation group: 'com.google.code.gson', name: 'gson', version: '2.8.8'

    testImplementation group: 'org.junit.jupiter', name: 'junit-jupiter-api', version: '5.7.2'
    testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:5.8.1'
    testImplementation group: 'org.mockito', name: 'mockito-core', version: '3.11.2'
    testImplementation 'org.codehaus.groovy:groovy:3.0.8'
    testImplementation 'org.spockframework:spock-core:2.0-groovy-3.0'
}

clean {
    delete += "${projectDir}/out"
}

compileJava {
    options.compilerArgs << '-Werror'
    options.compilerArgs << '-Xlint:all,-processing,-path'
    options.compilerArgs << '-XDignore.symbol.file=true'
    options.fork = true
    options.forkOptions.executable = 'javac'
}

test {
    useJUnitPlatform()
    reports {
        html.outputLocation = file("${buildDir}/docs/test")
        junitXml.outputLocation = file("${buildDir}/tests")
    }
    finalizedBy(jacocoTestReport)
}

jar {
    duplicatesStrategy = DuplicatesStrategy.EXCLUDE
    from {
        configurations.runtimeClasspath.findAll { it.name.endsWith('jar') }.collect { zipTree(it) }
    }
    manifest {
        attributes("Implementation-Title": project.name, "Implementation-Version": project.version)
    }
}
jar.finalizedBy(javadoc)

jacocoTestReport {
    group = "Reporting"
    reports {
        xml.required = true
        xml.outputLocation = file("${buildDir}/jacoco/jacoco.xml")
        html.required = true
        html.outputLocation = file("${buildDir}/docs/jacoco")
    }
    finalizedBy(jacocoTestCoverageVerification)
}

jacocoTestCoverageVerification {
    violationRules {
        rule {
            element = 'PACKAGE'
            enabled = honorScanningRules
            limit {
                counter = 'METHOD'
                minimum = 0.90
            }
        }
        rule {
            element = 'PACKAGE'
            enabled = honorScanningRules
            limit {
                counter = 'BRANCH'
                minimum = 0.70
            }
        }
    }
}

configurations {
    integrationImplementation.extendsFrom testImplementation
    integrationRuntime.extendsFrom testRuntime
}

sourceSets {
    integration {
        groovy.srcDir "${projectDir}/src/integration/groovy"
        resources.srcDir "${projectDir}/src/integration/resources"
        compileClasspath += main.output + test.output
        runtimeClasspath += main.output + test.output
    }
}

task integrationTest(type: Test, dependsOn: jar) {
    group = '_favorites'
    useJUnitPlatform()
    testClassesDirs = sourceSets.integration.output.classesDirs
    classpath = sourceSets.integration.runtimeClasspath

    testLogging {
        outputs.upToDateWhen {false}
        showCauses = true
        showExceptions = true
        showStackTraces = true
        showStandardStreams = true
        exceptionFormat = 'full'
    }
    reports {
        html.outputLocation = file("${buildDir}/docs/component_tests")
        junitXml.outputLocation = file("${buildDir}/tests")
    }
}
