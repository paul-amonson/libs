// Copyright (C) 2018 Paul Amonson
//
// SPDX-License-Identifier: Apache-2.0
//

apply plugin: 'idea'

def honorScanningRules = true

def gitVersionString = { ->
    def stdout = new ByteArrayOutputStream()
    exec {
        commandLine 'git', 'describe', '--tags'
        standardOutput = stdout
    }
    return stdout.toString().trim()
}

println("*** Building version: " + gitVersionString() + "\n")

allprojects {
    apply plugin: 'java'
    apply plugin: 'jacoco'
    apply plugin: 'pmd'

    version = gitVersionString()
    repositories {
        mavenCentral()
    }
}

subprojects {
    targetCompatibility = 11
    sourceCompatibility = 11

    dependencies {
        testCompile 'junit:junit:4.12+'
    }

    clean {
        delete += "${projectDir}/out"
    }

    javadoc {
        options.addBooleanOption('html5', true)
        doLast {
            copy {
                from(javadoc.outputs)
                from(file("${rootProject.projectDir}/index.html"))
                into "${rootProject.buildDir}/docs/${project.name}"
            }
            copy {
                from(file("${rootProject.projectDir}/html_src/stylesheet.css"))
                into "${rootProject.buildDir}/docs"
            }
            new File((String)"${rootProject.buildDir}/docs/index.html").text = """
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>libs API Java Documentation</title>
    <link rel="stylesheet" type="text/css" href="stylesheet.css" title="Style">
</head>
<body style="background-color:#dee3e9;">
<h1 style="text-indent:20px">libs API Java Documentation (${project.version})</h1>
<ul>
    <li>Package: <a href="crypto/index.html">crypto</a></li>
    <li>Package: <a href="logger/index.html">logger</a></li>
    <li>Package: <a href="prop_store/index.html">prop_store</a></li>
    <li>Package: <a href="xdg/index.html">xdg</a></li>
</ul>
</body>
</html>
"""
        }
    }

    check {
        finalizedBy(javadoc)
    }

    compileJava {
        options.compilerArgs << '-Werror'
        options.compilerArgs << '-Xlint:all,-processing,-path'
        options.compilerArgs << '-XDignore.symbol.file=true'
        options.fork = true
        options.forkOptions.executable = 'javac'
    }

    task copyJars(type: Copy) {
        from jar.outputs
        from configurations.compile
        into "${rootProject.buildDir}/libs"
    }
    jar.finalizedBy(copyJars)

    test {
        reports {
            html.destination file("${rootProject.buildDir}/reports/test/${project.name}")
            junitXml.destination file("${rootProject.buildDir}/tests/${project.name}")
        }
        finalizedBy(jacocoTestReport, pmdMain)
    }

    pmdTest.enabled = false
    pmdMain {
        group = "Reporting"
        consoleOutput = true
        rulePriority = 2
        ignoreFailures = !honorScanningRules
        reports {
            xml.enabled = true
            xml.destination = file("${rootProject.buildDir}/pmd/${project.name}.xml")
            html.enabled = true
            html.destination = file("${rootProject.buildDir}/reports/pmd/${project.name}.html")
        }
    }

    jacocoTestReport {
        group = "Reporting"
        reports {
            xml.enabled = true
            csv.enabled = false
            html.destination file("${rootProject.buildDir}/reports/jacoco/${project.name}")
            xml.destination file("${rootProject.buildDir}/jacoco/${project.name}.xml")
        }
        finalizedBy(jacocoTestCoverageVerification)
    }

    jacocoTestCoverageVerification {
        violationRules {
            rule {
                element = 'PACKAGE'
                enabled = honorScanningRules
                limit {
                    counter = 'METHOD'
                    minimum = 0.90
                }
            }
            rule {
                element = 'PACKAGE'
                enabled = honorScanningRules
                limit {
                    counter = 'BRANCH'
                    minimum = 0.70
                }
            }
        }
    }
}

project(':crypto') {
    group = 'com.amonson'
    dependencies {
        compile project(':prop_store')
    }
}

project(':prop_store') {
    group = 'com.amonson'
    dependencies {
        compile group: 'com.github.cliftonlabs', name: 'json-simple', version: '3.0.2+'
        compile group: 'org.yaml', name: 'snakeyaml', version: '1.21+'
    }
}

project(':logger') {
    group = 'com.amonson'
    dependencies {
    }
}
