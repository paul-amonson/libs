// Copyright (C) 2018-2021 Paul Amonson
//
// SPDX-License-Identifier: Apache-2.0
//

plugins {
    id 'idea'
    id 'java'
    id 'jacoco'
    id 'pmd'
    id 'groovy'
}

def honorScanningRules = false

String gitVersionString() {
    def stdout = new ByteArrayOutputStream()
    def stderr = new ByteArrayOutputStream()
    exec {
        ignoreExitValue = true
        standardOutput = stdout
        errorOutput = stderr
        commandLine "/usr/bin/git", "--git-dir=${rootProject.projectDir}/.git", "describe", "--tags"
    }
    String localVersion = stdout.toString().trim()
    return (localVersion == null || localVersion.isEmpty())?'0.0.0':localVersion
}

System.out.printf("*** Building version: %s\n\n", gitVersionString())

version = gitVersionString()

build.group = "_favorites"
clean.group = "_favorites"
test.group = "_favorites"
javadoc.group = "_favorites"

subprojects {
    apply plugin: 'java'
    apply plugin: 'jacoco'
    apply plugin: 'pmd'
    apply plugin: 'groovy'

    repositories {
        mavenCentral()
    }

    targetCompatibility = 11
    sourceCompatibility = 11

    dependencies {
        testImplementation group: 'org.junit.jupiter', name: 'junit-jupiter-api', version: '5.7.2'
        testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine'
        testImplementation group: 'org.mockito', name: 'mockito-core', version: '3.11.2'

        testImplementation 'org.codehaus.groovy:groovy:3.0.7'
        testImplementation 'org.spockframework:spock-core:2.0-groovy-3.0'
    }

    clean {
        delete += "${projectDir}/out"
    }

    javadoc {
        options.addBooleanOption('html5', true)
        doLast {
            copy {
                from(javadoc.outputs)
                into "${rootProject.buildDir}/docs/documentation/${project.name}"
            }
            copy {
                from(file("${rootProject.projectDir}/html_src/stylesheet.css"))
                into "${rootProject.buildDir}/docs/documentation"
            }
            new File((String)"${rootProject.buildDir}/docs/documentation").mkdirs()
            new File((String)"${rootProject.buildDir}/docs/documentation/index.html").text = """
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>libs API Java Documentation</title>
    <link rel="stylesheet" type="text/css" href="/stylesheet.css" title="Style">
</head>
<body style="background-color:#dee3e9;">
<h1 style="text-indent:20px"><a>${rootProject.name}</a> API Java Documentation (${rootProject.version})</h1>
<ul>
    <li>Package: <a href="crypto/index.html">crypto</a></li>
    <li>Package: <a href="logger/index.html">logger</a></li>
    <li>Package: <a href="factory/index.html">factory</a></li>
    <li>Package: <a href="prop_store/index.html">prop_store</a></li>
    <li>Package: <a href="shutdown_hook/index.html">shutdown_hook</a></li>
    <li>Package: <a href="task_manager/index.html">task_manager</a></li>
    <li>Package: <a href="xdg/index.html">xdg</a></li>
</ul>
</body>
</html>
"""
            new File((String)"${rootProject.buildDir}/docs/reports").mkdirs()
            new File((String)"${rootProject.buildDir}/docs/reports/index.html").text = """
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>libs Reports for Last Build</title>
    <link rel="stylesheet" type="text/css" href="/stylesheet.css" title="Style">
</head>
<body style="background-color:#dee3e9;">
<h1>Build Reports for <a href="https://github.com/paul-amonson/libs">${rootProject.name}</a>
Build: <i>${rootProject.version}</i></h1>
<h2 style="text-indent:20px">Test Reports</h2>
<ul>
    <li>Tests: <a href="test/crypto/index.html">crypto</a></li>
    <li>Tests: <a href="test/factory/index.html">factory</a></li>
    <li>Tests: <a href="test/logger/index.html">logger</a></li>
    <li>Tests: <a href="test/prop_store/index.html">prop_store</a></li>
    <li>Tests: <a href="test/shutdown_hook/index.html">shutdown_hook</a></li>
    <li>Tests: <a href="test/task_manager/index.html">task_manager</a></li>
    <li>Tests: <a href="test/xdg/index.html">xdg</a></li>
</ul>
<h2 style="text-indent:20px">Jacoco Coverage Reports</h2>
<ul>
    <li>Coverage: <a href="jacoco/crypto/index.html">crypto</a></li>
    <li>Coverage: <a href="jacoco/logger/index.html">logger</a></li>
    <li>Coverage: <a href="jacoco/factory/index.html">factory</a></li>
    <li>Coverage: <a href="jacoco/prop_store/index.html">prop_store</a></li>
    <li>Coverage: <a href="jacoco/shutdown_hook/index.html">shutdown_hook</a></li>
    <li>Coverage: <a href="jacoco/task_manager/index.html">task_manager</a></li>
    <li>Coverage: <a href="jacoco/xdg/index.html">xdg</a></li>
</ul>
<h2 style="text-indent:20px">PMD Static Analysis Reports</h2>
<ul>
    <li>Analysis: <a href="pmd/crypto.html">crypto</a></li>
    <li>Analysis: <a href="pmd/logger.html">logger</a></li>
    <li>Analysis: <a href="pmd/factory.html">factory</a></li>
    <li>Analysis: <a href="pmd/prop_store.html">prop_store</a></li>
    <li>Analysis: <a href="pmd/shutdown_hook.html">shutdown_hook</a></li>
    <li>Analysis: <a href="pmd/task_manager.html">task_manager</a></li>
    <li>Analysis: <a href="pmd/xdg.html">xdg</a></li>
</ul>
</body>
</html>
"""
        }
    }

    check {
        finalizedBy(javadoc)
    }

    compileJava {
//        options.compilerArgs << '-Werror' // TODO: Restore after deprecated classed are removed.
        options.compilerArgs << '-Xlint:all,-processing,-path'
        options.compilerArgs << '-XDignore.symbol.file=true'
        options.fork = true
        options.forkOptions.executable = 'javac'
    }

    test {
        useJUnitPlatform()
        reports {
            html.outputLocation = file("${rootProject.buildDir}/docs/reports/test/${project.name}")
            junitXml.outputLocation = file("${rootProject.buildDir}/tests/${project.name}")
        }
        finalizedBy(jacocoTestReport, pmdMain)
    }

    jar {
        duplicatesStrategy = DuplicatesStrategy.EXCLUDE
        from {
            configurations.runtimeClasspath.findAll { it.name.endsWith('jar') }.collect { zipTree(it) }
        }
    }

    pmdTest.enabled = false
    pmdMain {
        group = "Reporting"
        consoleOutput = true
        rulesMinimumPriority = 2
        ignoreFailures = !honorScanningRules
        reports {
            xml.required = true
            xml.outputLocation = file("${rootProject.buildDir}/pmd/${project.name}.xml")
            html.required = true
            html.outputLocation = file("${rootProject.buildDir}/docs/reports/pmd/${project.name}.html")
        }
    }

    jacocoTestReport {
        group = "Reporting"
        reports {
            xml.required = true
            xml.outputLocation = file("${rootProject.buildDir}/jacoco/${project.name}.xml")
            html.required = true
            html.outputLocation = file("${rootProject.buildDir}/docs/reports/jacoco/${project.name}")
        }
        finalizedBy(jacocoTestCoverageVerification)
    }

    jacocoTestCoverageVerification {
        violationRules {
            rule {
                element = 'PACKAGE'
                enabled = honorScanningRules
                limit {
                    counter = 'METHOD'
                    minimum = 0.90
                }
            }
            rule {
                element = 'PACKAGE'
                enabled = honorScanningRules
                limit {
                    counter = 'BRANCH'
                    minimum = 0.70
                }
            }
        }
    }
}

project(':logger') {
    group = 'com.amonson'
    dependencies {
        implementation group: 'org.zeromq', name: 'jeromq', version: '0.5.1'

        testImplementation project(':prop_store')
    }
}

project(':xdg') {
    group = 'com.amonson'
    dependencies {
    }
}

project(':prop_store') {
    group = 'com.amonson'
    dependencies {
        implementation group: 'com.github.cliftonlabs', name: 'json-simple', version: '3.0.2+'
        implementation group: 'org.yaml', name: 'snakeyaml', version: '1.21+'
    }
}

project(':crypto') {
    group = 'com.amonson'
    dependencies {
        implementation project(':prop_store')
    }
}

project(':factory') {
    group = 'com.amonson'
    dependencies {
        implementation project(':logger')
    }
}

project(':task_manager') {
    group = 'com.amonson'
    dependencies {
        implementation project(':logger')
    }
}

project(':shutdown_hook') {
    group = 'com.amonson'
    dependencies {
        implementation project(':logger')
    }
}

project(':config_location') {
    group = 'com.amonson'
    dependencies {
        implementation project(':prop_store')
        implementation group: 'redis.clients', name: 'jedis', version: '3.6.1'
    }
}

task fatJar(type: Jar, dependsOn: subprojects.jar) {
    duplicatesStrategy = DuplicatesStrategy.EXCLUDE
    subprojects.each { subproject ->
        from subproject.configurations.archives.allArtifacts.files.collect {
            zipTree(it)
        }
    }
}
check.finalizedBy(fatJar)
